jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Lightsail Single Instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USERNAME }}   # usually "ubuntu"
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}         # your PRIVATE key text
          script_stop: true
          script: |
            set -euo pipefail

            # Set environment variables
            export REPO_URL="https://github.com/Ctrost17/Sliptail.git"
            export DEPLOY_DIR="/opt/sliptail"

            echo "🚀 Starting automated deployment (Single Instance)..."

            # Ensure deps and folders
            sudo mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"

            # Clone or update repository (requires public repo OR server has access)
            if [ ! -d ".git" ]; then
              echo "📥 Cloning repository..."
              sudo git clone "$REPO_URL" .
              sudo chown -R ubuntu:ubuntu .
            else
              echo "🔄 Pulling latest changes..."
              git fetch origin
              git reset --hard origin/main
              git clean -fd
            fi

            echo "🛑 Replacing containers..."
            sudo docker rm -f sliptail-backend sliptail-frontend 2>/dev/null || true
            sudo docker image prune -f >/dev/null 2>&1 || true

            echo "🔧 Backend env..."
            cd sliptail-backend
            cat > .env.production << 'EOF'
            NODE_ENV=production
            PORT=5000

            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_PORT=${{ secrets.DB_PORT }}
            # If you need SSL-forced connections uncomment:
            # PGSSLMODE=require

            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EMAIL_LINK_SECRET=${{ secrets.EMAIL_LINK_SECRET }}

            # Use your real domain (no trailing slash)
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}     # e.g. https://sliptail.com
            APP_ORIGIN=${{ secrets.APP_ORIGIN }}         # e.g. https://sliptail.com

            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}

            AWS_REGION=${{ secrets.AWS_REGION }}         # us-east-2 for Ohio
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            SLIPTAIL_MAIL_FROM=${{ secrets.SLIPTAIL_MAIL_FROM }}

            ENABLE_CRON=1
            CRON_TZ=UTC
            EOF

            echo "🏗️ Build backend..."
            sudo docker build --pull -t sliptail-backend .

            echo "📁 Ensure uploads dir..."
            sudo mkdir -p /var/uploads
            sudo chown 1000:1000 /var/uploads

            echo "🚀 Run backend..."
            sudo docker run -d \
              --name sliptail-backend \
              --env-file .env.production \
              -p 5000:5000 \
              -v /var/uploads:/app/public/uploads \
              --restart unless-stopped \
              sliptail-backend

            echo "🎨 Frontend env..."
            cd ../sliptail-frontend
            cat > .env.production << 'EOF'
            # Must be your public site base (no /api, no trailing slash)
            NEXT_PUBLIC_API_URL=${{ secrets.FRONTEND_URL }}   # e.g. https://sliptail.com
            EOF

            echo "🏗️ Build frontend..."
            sudo docker build --pull -t sliptail-frontend .

            echo "🚀 Run frontend..."
            sudo docker run -d \
              --name sliptail-frontend \
              --env-file .env.production \
              -p 3000:3000 \
              --restart unless-stopped \
              sliptail-frontend

            echo "🔍 Health check..."
            sleep 8
            sudo docker ps

            echo "🔄 Reload nginx (if config changed)"
            sudo systemctl reload nginx || true

            echo "✅ Deployment complete."
