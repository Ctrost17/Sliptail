name: Deploy to AWS Lightsail (Single Instance)

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to Lightsail Single Instance
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USERNAME }}   # usually "ubuntu"
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}         # your PRIVATE key text
          script_stop: true
          script: |
            set -euo pipefail

            # --- config ---
            export REPO_URL="https://github.com/Ctrost17/Sliptail.git"
            export DEPLOY_DIR="/opt/sliptail"
            # ---------------

            echo "🚀 Starting automated deployment (Single Instance)..."

            # Ensure app directory exists and is up to date
            sudo mkdir -p "$DEPLOY_DIR"
            cd "$DEPLOY_DIR"

            if [ ! -d ".git" ]; then
              echo "📥 Cloning repository..."
              sudo rm -rf ./* .[^.]* || true
              sudo git clone "$REPO_URL" .
              sudo chown -R $USER:$USER .
            else
              echo "🔄 Pulling latest changes..."
              git fetch origin
              git reset --hard origin/main
              git clean -fd
            fi

            # Ensure env storage path exists (outside repo)
            echo "🔐 Preparing /srv/sliptail env directory..."
            sudo mkdir -p /srv/sliptail
            sudo chown $USER:$USER /srv/sliptail
            sudo chmod 700 /srv/sliptail

            echo "🔧 Writing backend.env..."
            cat > /srv/sliptail/backend.env <<'ENVBACK'
            NODE_ENV=production
            PORT=5000

            DB_HOST=${{ secrets.DB_HOST }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_NAME=${{ secrets.DB_NAME }}

            # node-postgres defaults (alias the DB_* values)
            PGHOST=${{ secrets.DB_HOST }}
            PGPORT=${{ secrets.DB_PORT }}
            PGUSER=${{ secrets.DB_USER }}
            PGPASSWORD=${{ secrets.DB_PASSWORD }}
            PGDATABASE=${{ secrets.DB_NAME }}

            APP_ORIGIN=https://sliptail.com
            FRONTEND_URL=https://sliptail.com

            JWT_SECRET=${{ secrets.JWT_SECRET }}
            EMAIL_LINK_SECRET=${{ secrets.EMAIL_LINK_SECRET }}

            STRIPE_SECRET_KEY=${{ secrets.STRIPE_SECRET_KEY }}
            STRIPE_PUBLISHABLE_KEY=${{ secrets.STRIPE_PUBLISHABLE_KEY }}
            STRIPE_WEBHOOK_SECRET=${{ secrets.STRIPE_WEBHOOK_SECRET }}

            AWS_REGION=${{ secrets.AWS_REGION }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            SLIPTAIL_MAIL_FROM=Sliptail <info@sliptail.com>

            ENABLE_CRON=1
            CRON_TZ=UTC
            PLATFORM_FEE_BPS=400
            STORAGE_DRIVER=local
            FFMPEG_DISABLE=1
            ENVBACK

                        # Trim accidental trailing spaces
                        sed -i 's/[ \t]*$//' /srv/sliptail/backend.env

                        echo "🎨 Writing frontend.env..."
                        cat > /srv/sliptail/frontend.env <<'ENVFRONT'
            NODE_ENV=production
            PORT=3000
            HOSTNAME=0.0.0.0
            # Use same-origin API via Nginx proxy to backend
            NEXT_PUBLIC_API_URL=/api
            ENVFRONT

            sed -i 's/[ \t]*$//' /srv/sliptail/frontend.env

            echo "🛑 Replacing containers..."
            sudo docker rm -f sliptail-backend sliptail-frontend 2>/dev/null || true
            sudo docker image prune -f >/dev/null 2>&1 || true

            echo "🏗️ Build backend image (no .env files baked)..."
            cd "$DEPLOY_DIR/sliptail-backend"
            # Make sure your repo has a .dockerignore that excludes .env* files
            sudo docker build --pull -t sliptail-backend .

            echo "📁 Ensure uploads dir..."
            sudo mkdir -p /var/uploads
            sudo chown 1000:1000 /var/uploads

            echo "🚀 Run backend with /srv/sliptail/backend.env..."
            sudo docker run -d \
              --name sliptail-backend \
              --env-file /srv/sliptail/backend.env \
              -p 5000:5000 \
              -v /var/uploads:/app/public/uploads \
              --restart unless-stopped \
              sliptail-backend

            echo "🏗️ Build frontend image..."
            cd "$DEPLOY_DIR/sliptail-frontend"
            sudo docker build --pull -t sliptail-frontend .

            echo "🚀 Run frontend with /srv/sliptail/frontend.env..."
            sudo docker run -d \
              --name sliptail-frontend \
              --env-file /srv/sliptail/frontend.env \
              -p 3000:3000 \
              --restart unless-stopped \
              sliptail-frontend

            echo "🔍 Health check..."
            sleep 8
            sudo docker ps
            curl -fsSI http://127.0.0.1:3000 | head -n1 || true
            curl -fsSI http://127.0.0.1:5000 | head -n1 || true
            curl -fsSI https://sliptail.com/api/health | head -n1 || echo "no /api/health route"

            echo "🔄 Reload nginx (if config changed)"
            sudo nginx -t && sudo systemctl reload nginx || true

            echo "✅ Deployment complete."
