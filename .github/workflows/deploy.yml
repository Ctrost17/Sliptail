name: Deploy to AWS Lightsail

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

jobs:
  deploy:
    name: Deploy mono-repo to single instance
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository (for future use)
        uses: actions/checkout@v4

      - name: Prepare SSH key (supports base64 or raw)
        shell: bash
        env:
          LIGHTSAIL_SSH_KEY: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          LIGHTSAIL_SSH_KEY_B64: ${{ secrets.LIGHTSAIL_SSH_KEY_B64 }}
        run: |
          set -euo pipefail
          mkdir -p "$HOME/.ssh"
          KEY_PATH="$HOME/.ssh/sliptail_ci"
          if [ -n "${LIGHTSAIL_SSH_KEY_B64:-}" ]; then
            echo "Decoding SSH key from base64"
            echo "$LIGHTSAIL_SSH_KEY_B64" | base64 -d > "$KEY_PATH"
          elif [ -n "${LIGHTSAIL_SSH_KEY:-}" ]; then
            echo "Writing SSH key from raw secret"
            # Write and strip possible CR characters to avoid parse errors
            printf "%s" "$LIGHTSAIL_SSH_KEY" | tr -d '\r' > "$KEY_PATH"
          else
            echo "ERROR: Neither LIGHTSAIL_SSH_KEY_B64 nor LIGHTSAIL_SSH_KEY is set"
            exit 1
          fi
          chmod 600 "$KEY_PATH"
          echo "SSH_KEY_PATH=$KEY_PATH" >> "$GITHUB_ENV"

      - name: Preflight SSH check (whoami/uname)
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USERNAME }}
          key_path: ${{ env.SSH_KEY_PATH }}
          passphrase: ${{ secrets.LIGHTSAIL_SSH_PASSPHRASE }}
          # Port omitted to default to 22; change here if you use a custom SSH port
          script_stop: true
          script: |
            set -e
            whoami
            uname -a

      - name: Deploy over SSH to Lightsail
        uses: appleboy/ssh-action@v0.1.10
        env:
          # Database
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_PORT: ${{ secrets.DB_PORT }}
          # App
          NODE_ENV: ${{ secrets.NODE_ENV }}
          JWT_SECRET: ${{ secrets.JWT_SECRET }}
          EMAIL_LINK_SECRET: ${{ secrets.EMAIL_LINK_SECRET }}
          FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
          APP_ORIGIN: ${{ secrets.APP_ORIGIN }}
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          # Stripe
          STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
          STRIPE_PUBLISHABLE_KEY: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          STRIPE_CONNECT_WEBHOOK_SECRET: ${{ secrets.STRIPE_CONNECT_WEBHOOK_SECRET }}
          # AWS
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          SLIPTAIL_MAIL_FROM: ${{ secrets.SLIPTAIL_MAIL_FROM }}
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USERNAME }}
          key_path: ${{ env.SSH_KEY_PATH }}
          passphrase: ${{ secrets.LIGHTSAIL_SSH_PASSPHRASE }}
          # Port omitted to default to 22; set explicitly if you use a custom port
          script_stop: true
          envs: >-
            DB_HOST,DB_USER,DB_PASSWORD,DB_NAME,DB_PORT,
            NODE_ENV,JWT_SECRET,EMAIL_LINK_SECRET,FRONTEND_URL,APP_ORIGIN,NEXT_PUBLIC_API_URL,
            STRIPE_SECRET_KEY,STRIPE_PUBLISHABLE_KEY,STRIPE_WEBHOOK_SECRET,STRIPE_CONNECT_WEBHOOK_SECRET,
            AWS_REGION,AWS_ACCESS_KEY_ID,AWS_SECRET_ACCESS_KEY,SLIPTAIL_MAIL_FROM
          script: |
            set -euo pipefail

            REPO_URL="https://github.com/Ctrost17/Sliptail.git"
            REPO_DIR="/opt/sliptail"

            echo "==> Ensure repo directory exists"
            sudo mkdir -p "$REPO_DIR"

            echo "==> Clone or update repository"
            if [ ! -d "$REPO_DIR/.git" ]; then
              cd "$REPO_DIR"
              sudo git clone "$REPO_URL" .
              sudo chown -R "$USER":"$USER" .
            else
              cd "$REPO_DIR"
              git fetch origin
              git reset --hard origin/main
              git clean -fd
            fi

            echo "==> Write backend .env.production from GitHub secrets"
            cd "$REPO_DIR/sliptail-backend"
            cat > .env.production << EOF
            NODE_ENV=${NODE_ENV:-production}
            PORT=5000

            # Database
            DB_HOST=${DB_HOST}
            DB_USER=${DB_USER}
            DB_PASSWORD=${DB_PASSWORD}
            DB_NAME=${DB_NAME}
            DB_PORT=${DB_PORT:-5432}

            # Secrets
            JWT_SECRET=${JWT_SECRET}
            EMAIL_LINK_SECRET=${EMAIL_LINK_SECRET}

            # URLs
            FRONTEND_URL=${FRONTEND_URL}
            APP_ORIGIN=${APP_ORIGIN}

            # Stripe
            STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
            STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}

            # AWS SES
            AWS_REGION=${AWS_REGION}
            AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            SLIPTAIL_MAIL_FROM=${SLIPTAIL_MAIL_FROM}

            # Cron
            ENABLE_CRON=1
            EOF

            # Append optional webhook secrets if provided
            if [ -n "${STRIPE_WEBHOOK_SECRET:-}" ]; then
              echo "STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}" >> .env.production
            fi
            if [ -n "${STRIPE_CONNECT_WEBHOOK_SECRET:-}" ]; then
              echo "STRIPE_CONNECT_WEBHOOK_SECRET=${STRIPE_CONNECT_WEBHOOK_SECRET}" >> .env.production
            fi

            echo "==> Write frontend .env.production from GitHub secrets"
            cd "$REPO_DIR/sliptail-frontend"
            cat > .env.production << EOF
            NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
            EOF

            echo "==> Run deployment script"
            cd "$REPO_DIR"
            chmod +x deploy.sh
            sudo bash ./deploy.sh

            echo "==> Deployment finished"
